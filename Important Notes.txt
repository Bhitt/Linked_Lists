Singly Linked List vs Doubly Linked List:
	A singly linked list contains nodes that only point to the next node in the list.
	A doubly linked list contains nodes that point to the next node and previous node in the list.
Drawback of linked lists:
	Unlike an array, a linked list does not provide constant time access to a particular "index"
	within the list. This means that if you'd like to find the Kth element in the list, you will 
	need to iterate through K elements.
Benefit of linked lists:
	The main benefit of a linked list is that you can add and remove items from the beginning of the
	list in constant time.
Deleting Nodes:
	It is important to handle node pointers correctly and to update the head and tail node when
		necessary.
	When removing references to nodes, some languages will need you to also handle deallocation.
The "Runner" Technique:
	The "runner" technique (or second pointer) technique is used in many linked list problems. The
	runner technique means that you iterate through the linked list with two pointers simultaneously,
	with one ahead of the other. The "fast" node might be ahead by a fixed amount, or it might be
	hopping multiple nodes for one node that the "slow" node iterates through.
Recursive Problems:
	A number of linked list problems rely on recursion. If you're having trouble solving a linked list
	problem, you should explore if a recursive approach will work.